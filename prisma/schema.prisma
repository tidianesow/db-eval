generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("student")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  exercises     Exercise[]
  submissions   Submission[]
  feedbacks     Feedback[]
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  pdfUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  dueDate     DateTime?
  published   Boolean  @default(false)

  author      User         @relation(fields: [authorId], references: [id])
  solutions   Solution[]
  submissions Submission[]
}

model Solution {
  id         String   @id @default(cuid())
  exerciseId String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Submission {
  id             String    @id @default(cuid())
  exerciseId     String
  studentId      String
  pdfUrl         String
  score          Float?
  feedback       String?   @db.Text
  status         String    @default("pending")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  plagiarismScore Float?
  notes          String?   @db.Text

  exercise       Exercise  @relation(fields: [exerciseId], references: [id])
  student        User      @relation(fields: [studentId], references: [id])
  feedbacks      Feedback[]
}

model Feedback {
  id           String   @id @default(cuid())
  submissionId String
  content      String   @db.Text
  score        Float
  createdAt    DateTime @default(now())
  teacherId    String?
  aiGenerated  Boolean  @default(false)

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  teacher      User?      @relation(fields: [teacherId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  link      String?
  metadata  Json?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  students  StudentGroup[]
}

model StudentGroup {
  id        String   @id @default(cuid())
  studentId String
  groupId   String
  createdAt DateTime @default(now())
  
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

